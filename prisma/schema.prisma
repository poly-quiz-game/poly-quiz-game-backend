generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://poly_admin:Pass@word1@poly-quiz-db.postgres.database.azure.com:5432/poly_quiz_db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  quizzes   Quiz[]
  reports   Report[]
}

model Quiz {
  id              Int        @id @default(autoincrement())
  name            String     @db.VarChar(255)
  coverImage      String?    @db.VarChar(255)
  backgroundImage String?    @db.VarChar(255)
  music           String?    @db.VarChar(255)
  needLogin       Boolean    @default(false)
  numberOfPlayer  Int        @default(20)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userId          Int
  description     String?    @db.VarChar(255)
  user            User       @relation(fields: [userId], references: [id])
  questions       Question[]
  reports         Report[]
}

model Question {
  id             Int          @id @default(autoincrement())
  image          String?      @db.VarChar(255)
  correctAnswer  String
  timeLimit      Int
  quizId         Int?
  question       String       @db.VarChar(255)
  questionTypeId Int
  type           QuestionType @relation(fields: [questionTypeId], references: [id], onDelete: Cascade, map: "questionType___fk")
  quiz           Quiz?        @relation(fields: [quizId], references: [id])
  answers        Answer[]
}

model Answer {
  index      Int
  questionId Int
  answer     String   @db.VarChar(255)
  question   Question @relation(fields: [questionId], references: [id])

  @@id([index, questionId])
}

model Report {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  quizId          Int
  userId          Int
  quiz            Quiz             @relation(fields: [quizId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  players         Player[]
  reportQuestions ReportQuestion[]
}

model Player {
  id            Int            @id @default(autoincrement())
  name          String?        @db.VarChar(255)
  score         Int            @default(0)
  reportId      Int
  email         String?        @db.VarChar(255)
  report        Report         @relation(fields: [reportId], references: [id])
  playerAnswers PlayerAnswer[]
}

model PlayerAnswer {
  playerId       Int
  questionId     Int
  time           Int            @default(0)
  answer         String
  Player         Player         @relation(fields: [playerId], references: [id])
  reportQuestion ReportQuestion @relation(fields: [questionId], references: [id])

  @@id([playerId, questionId])
}

model ReportQuestion {
  id                    Int                    @id @default(autoincrement())
  image                 String?                @db.VarChar(255)
  correctAnswer         String
  timeLimit             Int
  reportId              Int
  question              String                 @db.VarChar(255)
  questionTypeId        Int
  type                  QuestionType           @relation(fields: [questionTypeId], references: [id], onDelete: Cascade, map: "reportquestiontype___fk")
  report                Report                 @relation(fields: [reportId], references: [id])
  playerAnswer          PlayerAnswer[]
  reportQuestionAnswers ReportQuestionAnswer[]
}

model ReportQuestionAnswer {
  index      Int
  questionId Int
  answer     String         @db.VarChar(255)
  question   ReportQuestion @relation(fields: [questionId], references: [id])

  @@id([index, questionId])
}

model QuestionType {
  id             Int                @id(map: "questiontype_pk") @default(autoincrement())
  name           QuestionTypeValue?
  isActive       Boolean?           @default(true)
  Question       Question[]
  ReportQuestion ReportQuestion[]
}

enum QuestionTypeValue {
  SINGLE_CORRECT_ANSWER
  MULTIPLE_CORRECT_ANSWER
  TRUE_FALSE_ANSWER
  TYPE_ANSWER
}
